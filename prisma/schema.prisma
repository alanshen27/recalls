// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  flashcardSets FlashcardSet[]
  sharedSets    SharedSet[]
  notifications Notification[]
  studying      StudyingSet[]
  ratings       Rating[]
  studySessions StudySession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FlashcardSet {
  id          String      @id @default(cuid())
  title       String
  description String?
  ownerId     String?
  owner       User?        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  labels      String?     // Comma-separated list of labels
  flashcards  Flashcard[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sharedWith  SharedSet[]
  public      Boolean     @default(false)
  studiedBy   StudyingSet[]
  ratings     Rating[]
  studySessions StudySession[]
}

model Flashcard {
  id             String       @id @default(cuid())
  term           String?
  definition     String?
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  studyResults   StudyResult[]
}

model SharedSet {
  id             String       @id @default(cuid())
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  sharedWithId   String
  sharedWith     User         @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([flashcardSetId, sharedWithId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // e.g., "share", "mention", "system"
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model StudyingSet {
  id             String       @id @default(cuid())
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([flashcardSetId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rating {
  id             String       @id @default(cuid())
  rating         Int
  createdAt      DateTime     @default(now())
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flashcardSetId, userId])
}

model StudySession {
  id             String       @id @default(cuid())
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt      DateTime     @default(now())
  completedAt    DateTime?
  studyOptions   Json         // Store study options as JSON
  results        StudyResult[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model StudyResult {
  id             String       @id @default(cuid())
  studySessionId String
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  flashcardId    String
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  userAnswer     String
  isCorrect      Boolean
  attempts       Int          @default(1)
  testTerm       Boolean      // Whether the term was being tested (vs definition)
  isMultipleChoice Boolean    @default(false)
  selectedOption String?      // For multiple choice questions
  answeredAt     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}